[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyflink-docs"
version = "2.0.0"
description = "PyFlink Documentation"
authors = [
    {name = "Apache Flink Community", email = "dev@flink.apache.org"}
]
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["flink", "python", "streaming", "batch", "documentation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
]

dependencies = [
    "sphinx>=4.0.0",
    "sphinx_mdinclude>=0.1.0",
    "pydata_sphinx_theme>=0.8.0",
    "pygments>=2.10.0",
]

[project.optional-dependencies]
dev = [
    "doc8>=1.0.1",
    "sphinx-lint>=0.6.0",
    "rstcheck>=6.1.1",
    "sphinxcontrib-spelling>=8.0.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "sphinx-testing>=1.0.0",
    "nbformat>=5.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "ruff>=0.3.0",
]
lint = [
    "doc8>=1.0.1",
    "sphinx-lint>=0.6.0",
    "rstcheck>=6.1.1",
]
spell = [
    "sphinxcontrib-spelling>=8.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "sphinx-testing>=1.0.0",
    "nbformat>=5.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

[project.urls]
Homepage = "https://flink.apache.org/"
Documentation = "https://nightlies.apache.org/flink/flink-docs-stable/docs/dev/python/"
Repository = "https://github.com/apache/flink"
"Bug Tracker" = "https://issues.apache.org/jira/projects/FLINK"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["_build*", "*.egg-info*", "tests*"]

[tool.doc8]
max-line-length = 120
allow-long-titles = true
ignore = [
    "_build",
    ".git",
    ".venv",
    "venv",
    "__pycache__",
]
ignore-errors = [
    "D001",  # no-contents (for index files)
    "D002",  # no-trailing-spaces (allow in code blocks)
    "D003",  # no-trailing-whitespace (allow in code blocks)
    "D004",  # no-hard-tabs (allow in code blocks)
]

[tool.rstcheck]
ignore = [
    "D001",
    "D002",
    "D003",
    "D004",
]

[tool.pre-commit.ci]
autofix_commit_msg = "style: auto fixes from pre-commit hooks"
autoupdate_commit_msg = "ci: pre-commit autoupdate"

[[tool.pre-commit.hooks]]
id = "doc8"
name = "doc8"
entry = "doc8"
language = "system"
types = ["rst"]
args = ["--max-line-length=120"]

[[tool.pre-commit.hooks]]
id = "rstcheck"
name = "rstcheck"
entry = "rstcheck"
language = "system"
types = ["rst"]

[[tool.pre-commit.hooks]]
id = "sphinx-lint"
name = "sphinx-lint"
entry = "sphinx-lint"
language = "system"
types = ["rst"]
args = ["."]

[[tool.pre-commit.hooks]]
id = "trailing-whitespace"
name = "trailing whitespace"
entry = "trailing-whitespace"
language = "system"

[[tool.pre-commit.hooks]]
id = "end-of-file-fixer"
name = "end of file fixer"
entry = "end-of-file-fixer"
language = "system"

[[tool.pre-commit.hooks]]
id = "check-yaml"
name = "check yaml"
entry = "check-yaml"
language = "system"

[[tool.pre-commit.hooks]]
id = "check-added-large-files"
name = "check added large files"
entry = "check-added-large-files"
language = "system"
args = ["--maxkb=1000"]

[tool.ruff]
# Target Python version
target-version = "py38"

# Line length
line-length = 120

# Exclude patterns
exclude = [
    ".git",
    ".venv",
    "venv",
    "_build",
    "*.egg-info",
    "__pycache__",
    "reference/api",  # Auto-generated API docs
    "reference/pyflink.*/api",  # Auto-generated API docs
]

# Respect .gitignore
respect-gitignore = true

[tool.ruff.lint]
# Enable specific rules for documentation code blocks
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

# Ignore specific rules that are common in documentation examples
ignore = [
    "E501",  # line too long (handled by line-length)
    "E722",  # do not use bare except (common in examples)
    "F401",  # imported but unused (common in examples)
    "F821",  # undefined name (common in examples)
    "F841",  # assigned but never used (common in examples)
    "B006",  # do not use mutable data structures for argument defaults
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (examples can be complex)
]

# Allow autofix behavior
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules for test files
"tests/**/*.py" = ["F401", "F841"]
# Ignore specific rules for example files
"examples/**/*.py" = ["F401", "F841", "E722"] 